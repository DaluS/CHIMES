
from typing import Union

# Matplotlib imports
import matplotlib.pyplot as plt
import matplotlib

# Plotly imports
import plotly.graph_objects as go
import plotly.offline as pyo

# Internal imports

# Matplotlib RCParams useful elements
matplotlib.rc('xtick', labelsize=15)
matplotlib.rc('ytick', labelsize=15)
plt.rcParams.update({'font.size': 10})
params = {'legend.fontsize': 6,
          'legend.handlelength': 0,
          'legend.borderpad': 0,
          'legend.labelspacing': 0.0}
SIZETICKS = 20
SIZEFONT = 10
LEGENDSIZE = 20
LEGENDHANDLELENGTH = 2


def Showsensitivity(
        OUT: dict,
        vars: Union[list, str],
        titlevariation: str = '',
        returnFig: bool = False):
    """
    Plot part of a sensitivity analysis in CHIMES from `hub.run_sensitivity()`

    Parameters
    ----------
    OUT : dict
        A dictionary of hubs generated by `hub.run_sensitivity()`.
    vars : Union[list, str]
        The variable(s) to measure sensitivity on. If a list of strings is provided, the function will generate a plot for each.
    titlevariation : str, optional
        A string explaining the type of variation and preset used, by default an empty string.
    returnFig : bool, optional
        Whether to show the figure or not. If True, it returns a dictionary of figures for each vars entry.

    Returns
    -------
    dict or None
        If returnFig is True, returns a dictionary of figures. Otherwise, displays the plots.

    Notes
    -----
    The function initializes sensitivity analysis using `OUT = hub.run_sensitivity()`.

    Examples
    --------
    >>> Showsensitivity(OUT, 'variable_name')  # Plots sensitivity analysis for a single variable
    >>> Showsensitivity(OUT, ['var1', 'var2'], titlevariation='Scenario A')  # Plots sensitivity for multiple variables with a title variation
    >>> figures = Showsensitivity(OUT, 'variable', returnFig=True)  # Returns figures in a dictionary without displaying them.

    Author
    ------
    Paul Valcke

    Last Modified
    -------------
    Date: 2024-01-19
    """
    if isinstance(vars, str):
        vars = [vars]

    Figures = {}

    dic = {}
    for v in vars:
        plt.figure(v)
        dic[v] = {}
        for k, H in OUT.items():
            R = H.get_dfields()
            time = R['time']['value'][:, 0, 0, 0, 0]
            dic[v][k] = go.Scatter(x=time, y=R[v]['sensitivity'][0]['']['stdv'], mode='lines', name=R.get(k, {'symbol': k})['symbol'])

            layout = go.Layout(
                title=f"Sensitivity study: model {H.dmodel['name']}, variations: {titlevariation}",
                xaxis=dict(title='Time'),
                yaxis=dict(title=f"Sensitivity on variable {R[v]['symbol']}"),
                legend=dict(orientation='h'),
            )
            fig = go.Figure(data=list(dic[v].values()), layout=layout)
            Figures[v] = fig
    if returnFig:
        return Figures
    else:
        for v in vars:
            pyo.iplot(Figures[v])
