"""Template to write your model. This is the short description"""

from chimes.libraries import importmodel      # Import another model _LOGICS, _PRESETS
from chimes.libraries import Operators as O   # Prewritten operators for multisectoral and multiregional coupling. `chm.get_available_Operators()`
from chimes.libraries import fill_dimensions   # When using multisectoral dynamics, fill automatically the sizes of fields
from chimes.libraries import merge_model       # Merge two model logics into each others
from chimes.libraries import Funcs            # Prewritten functions from CHIMES use `chm.get_available_Functions()`
import numpy as np                          # if you need exponential, pi, log

_DESCRIPTION = """
Template to write your model. This can be written with markdown formalism.

## What is this model ?
## Why is it interesting ? 
## what is the purpose of your model,
## Expected behavior

DO NOT EDIT THIS FILE ! COPY AND PASTE IT THEN MODIFY THE COPY TO WRITE YOUR MODEL
"""

_TODO = ['a list of tasks', 'that should be done']
_ARTICLE = " a link to the published article if existing"
_DATE = " YYYY/MM/DD model file creation"
_CODER = " Name of the coder"
_KEYWORDS = ['a list of relevant elements for classification', 'Documentation', 'Tutorial',]

# ################# ALL THE NEW FIELDS LOGICS ###############################
_LOGICS = dict(
    size=dict(
    ),
    differential=dict(
        p=dict(
            func=lambda p, inflation: p*inflation,
            initial=1,
            units='$.Units^{-1}',
            definition='nominal value per physical unit produced',
            com='inflation driven',
            symbol=r'$p$',
            size=['__ONE__', '__ONE__']),
        p2={'func': lambda p, inflation2: p*inflation2,  # for short
            'initial': 1, },
        K=lambda K: 0.01*K,
    ),
    statevar=dict(
        trueinflation=lambda inflation, inflation2: inflation+inflation2,
    ),
    parameter=dict(
        inflation=dict(value=0.05,
                       definition='Inflation definition'),
        inflation2=0.04
    ),
)

Dimensions = {
    # 'scalar': [],
    'vector': [],
    'matrix': [],
}
DIM = {'scalar': ['__ONE__'],
       'vector': ['Nprod'],
       'matrix': ['Nprod', 'Nprod']}
# _LOGICS=fill_dimensions(_LOGICS,Dimensions,DIM)

# logicsgoodwin,presetgoodwin,supplementsgoodwin= importmodel('Goodwin') # Will import locally the content of the model named 'Goodwin'
# _LOGICS = merge_model(_LOGICS, logicsgoodwin, verb=False)     # Takes the equations of _LOGICS_GOODWIN and put them into _LOGICS


# ################## SUPPLEMENTS IF NEEDED ###################################
_SUPPLEMENTS = {}

# ################## DEFIMING PRESETS WITH THEIR SUPPLEMENTS #################
_PRESETS = dict(
    preset0=dict(
        fields=dict(
            inflation=0.3,
            inflation2=0,
            p2=2
        ),
        com='EMPTY',
        plots={
            'Var': [dict(
                key='',
                mode=False,  # sensitivity, cycles
                log=False,
                idx=0,
                Region=0,
                tini=False,
                tend=False,
                title=''
            ),],
            'XY': [dict(
                   x='',
                   y='',
                   color='',
                   scaled=False,
                   idx=0,
                   Region=0,
                   tini=False,
                   tend=False,
                   title='',
                   ),],
            'XYZ': [dict(
                x='',
                y='',
                z='',
                color='time',
                idx=0,
                Region=0,
                tini=False,
                tend=False,
                title=''
            ),],
            'cycles_characteristics': [dict(
                xaxis='omega',
                yaxis='employment',
                ref='employment',
                type1='frequency',
                normalize=False,
                Region=0,
                title=''
            ),],
            'byunits': [dict(
                filters_key=(),
                filters_units=(),
                filters_sector=(),
                separate_variables={},
                lw=1,
                idx=0,
                Region=0,
                tini=False,
                tend=False,
                title=''
            ),],
            'nyaxis': [dict(
                y=[[], []],
                x='time',
                idx=0,
                Region=0,
                log=False,  # []
                title='',
            ),],
        },
    ),
)
