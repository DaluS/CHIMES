"""Transform production function to a CES"""

_DESCRIPTION = """
* **Name :** CES module
* **Article :** []
* **Author  :** Paul Valcke
* **Coder   :** Paul Valcke

* **Supplements description :** Not developped to be used in standalone 

$$Y=A (b K^{-\eta} + (1-b) (aL)^{-\eta} )^(-1/\eta)$$
$$Y=Yc (1 + (L/L_c)^{-\eta} )^(-1/\eta)= Yc (1 + (l)^{-\eta} )^(-1/\eta)$$

Solving $$\dfrac{\partial \Pi}{\partial L}= 0$$ 

It gives : 
$$ \omega_c = (w/(A*a0*p*(1-gamma)))*((1-b)/b)^(1/\eta)$$
$$ l = (omegacarac^(-CESexp/(1+CESexp)) - 1)^(1/CESexp)$$

There is an hard-cap to ensure that it can work with $\omega_c\geq 1 $ (which gives $l=0$)

**TODO:**
* DO NOT EDIT THIS FILE ! COPY AND PASTE IT THEN MODIFY THE COPY TO WRITE YOUR MODEL


"""
################# IMPORTS ##################################################
import numpy as np #(if you need exponential, pi, log, of matrix products...)
from pygemmes._models import Funcs, importmodel,mergemodel,filldimensions
from pygemmes._models import Operators as O


def l(omegacarac,CESexp):
    return np.select([omegacarac<1,omegacarac>=1],[(np.maximum(omegacarac**(-CESexp/(1+CESexp)) - 1,10**(-3)))**(1/CESexp),.5])
################## ALL THE NEW FIELDS LOGICS ###############################
_LOGICS = { 'size'        : {},
            'differential': {},
            'statevar'    : {
        'Yc': {'func': lambda K,b,CESexp,A : A*K*b**(-1/CESexp),
               'units': 'Units.y^{-1}'},
        'Lc': {'func': lambda b,CESexp,K,a0: K/a0 * (b/(1-b))**(-1/CESexp),
               'units': 'Humans'},
        'omegacarac': {'func': lambda w,a0,p,A,b,CESexp,gamma: (w/(A*a0*p*(1-gamma)))*((1-b)/b)**(1/CESexp),
                                    'symbol': '$\omega^c(1-\gamma)^{-1}$' },
        'l' : {'func': l,
                                    'com': 'Floor at 0.5'},
        'Y' : {'func': lambda Yc,l,CESexp : Yc * (1 +l**(-CESexp) )**(-1/CESexp),
                                    'com' : 'CES PRODUCTION FUNCTION'},
        'L' : {'func': lambda l,Lc : l*Lc },
        'nu': {'func': lambda K,Y: K/Y},
    },
            'parameter'   : {},}



################## MODELS YOU WANT TO MERGE THE NEW LOGICS INTO ############

#_LOGICS_GOODWIN,_PRESETS0= importmodel('Goodwin')
#_LOGICS = mergemodel(_LOGICS, _LOGICS_GOODWIN, verb=False) 

################## ADDING DIMENSIONS TO VARIABLES IF NOT DONE BEFORE #######
'''
Comment the line in 'Dimensions' you want to be filled by default. 
The system does not handle automatically multiple types of matrix/vector dimensions. do it manually
Modify DIM 
'''
Dimensions = { 
    #'scalar': [],
    'matrix': [],
    'vector': [],       #
}
DIM= {'scalar':['__ONE__'],
      'vector':['Nprod'],
      'matrix':['Nprod','Nprod']  }
_LOGICS=filldimensions(_LOGICS,Dimensions,DIM)

'''
################################ TRANSFORMING INTO CES ###################
_LOGICS['statevar']['Yc'] = {'func': lambda K,b,CESexp,A : A*K*b**(-1/CESexp)}
_LOGICS['statevar']['Lc'] = {'func': lambda b,CESexp,K,a0: K/a0 * (b/(1-b))**(-1/CESexp)}
_LOGICS['statevar']['omegacarac'] = {
                            'func': lambda w,a0,p,A,b,CESexp,gamma: (w/(A*a0*p*(1-gamma)))*((1-b)/b)**(1/CESexp),
                            'symbol': '$\omega^c(1-\gamma)^{-1}$' }
_LOGICS['statevar']['l'] = {'func': lambda omegacarac, CESexp: np.maximum(0.01,(omegacarac**(-CESexp/(1+CESexp)) - 1))**(1/CESexp),
                            'com': 'ratio L/Lc'}
_LOGICS['statevar']['Y' ] = {'func': lambda Yc,l,CESexp : Yc * (1 +l**(-CESexp) )**(-1/CESexp),
                             'com' : 'CES PRODUCTION FUNCTION'}
_LOGICS['statevar']['L'] = {'func': lambda l,Lc : l*Lc }
_LOGICS['statevar']['nu']= {'func': lambda K,Y: K/Y}
'''

################### SUPPLEMENTS IF NEEDED ###################################
_SUPPLEMENTS={}

################### DEFIMING PRESETS WITH THEIR SUPPLEMENTS #################
_PRESETS = {
    'preset0': {
        'fields': {},
        'com': '',
        'plots': {'Var': [{'key':'',
                           'mode':False, #sensitivity, cycles
                           'log':False,
                           'idx':0, 
                           'Region':0, 
                           'tini':False, 
                           'tend':False, 
                           'title':''},
                  ],
                  'XY': [{  'x':'',
                            'y':'',
                            'color':'', 
                            'scaled':False,
                            'idx':0, 
                            'Region':0, 
                            'tini':False, 
                            'tend':False, 
                            'title':'', 
                            },
                  ],
                  'XYZ': [{ 'x':'',
                            'y':'',
                            'z':'', 
                            'color':'time', 
                            'idx':0, 
                            'Region':0, 
                            'tini':False, 
                            'tend':False, 
                            'title':''},
                  ],
                  'cycles_characteristics': [{'xaxis':'omega', 
                                              'yaxis':'employment', 
                                              'ref':'employment', 
                                              'type1':'frequency', 
                                              'normalize':False, 
                                              'Region':0, 
                                              'title':''},
                  ],
                  'plotbyunits': [{'filters_key':(),
                                   'filters_units':(),
                                   'filters_sector':(),
                                   'separate_variables':{}, 
                                   'lw':1, 
                                   'idx':0, 
                                   'Region':0, 
                                   'tini':False, 
                                   'tend':False, 
                                   'title':''}
                  ],
                  'plotnyaxis' : [{'y':[[],[]],
                                   'x':'time', 
                                   'idx':0,
                                   'Region':0,
                                   'log':False,# []
                                   'title':'', 
                                   }
                  ],    
        },
    },
}


