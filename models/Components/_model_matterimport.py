"""Template to write your model. This is the short description"""

_DESCRIPTION = """
Template to write your model. This can be written with markdown formalism. 

* **Name :**
* **Article :** 
* **Author  :** 
* **Coder   :** 

* **Supplements description :** 

**TODO:**
* DO NOT EDIT THIS FILE ! COPY AND PASTE IT THEN MODIFY THE COPY TO WRITE YOUR MODEL
"""
################# IMPORTS ##################################################
import numpy as np #(if you need exponential, pi, log, of matrix products...)
from pygemmes._models import Funcs, importmodel,mergemodel,filldimensions
from pygemmes._models import Operators as O


################# Matter Gestion ###########################################
'''
from mater_gemmes import GemmesMater
import warnings
import os 
def initialize_MATTER(Tmax,scenario=None):
    # import mater if possible
    try:
        import mater_package as mater
        boolMATER = True
    except ImportError:
        boolMATER = False

    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        scenario = GemmesMater()
        materpath = os.path.split(mater.__path__[0])[0]
        scenario.load(os.path.join(materpath, 'data', 'data', "MATER Monde3 data2.mater"))
        scenario.mater_pre_processing(
                # MATER needs to build the infrastructures from 1901 on
                # To get consistent data, we must start the simulation in 1901
                simulation_start_time = 1901,
                simulation_end_time = min(2099, Tmax),
                approach=["LogisticalStart"],
                calcul=["Endogenous"],
                region=["World"]
        )

    yield scenario

def MATER_initial(scenario):
    # initial time loop for MATER (1901-2016)
    for year in np.arange(
                        scenario.simulation_start_time,
                        2016,
                        scenario.sampling_period): 
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            scenario.mater_time_loop(year) # time loop of MATER
        print('Mater year', year)

def from_MATER(scenario):
            # exchange coupling variables
        Etot, Npop = scenario.MATER_to_GEMMES(year) # (4) exchange variables

def to_MATER((108.91513576859262/59.74)*int_GDP, year) 
'''


class MATTER_API():
    ##################### INITIATION ###############
    def __init__(self):
        '''
        A fake init to create the object, but not necessarily doing all 
        the long loading (this should be done at the first run iteration)
        '''
        self.ready=False
        self.lastiteration = 0
        self.mattertimestep = 1/12.
        pass

    def TrueInit(self,year):
        '''
        Where matter is simulating all the necessary years before the experiment
        '''
        ### BLABLA doing the simulation up to the year "year"
        self.ready=True
        self.lastiteration=year

    ##################### TALKING TO MATTER #########

    def _simulate_year(self,time):
        '''
        Run the simulation until year 'time' is done
        '''
        ### Run simulation
        self.lastiteration=time
        pass 

    def get_var(self,varname,time):
        '''
        Ask matter for a variable "varname" at a time "time"        
        '''
        if self.lastiteration ==time: # if the simulation are at the same timestep 
            return #the exact value 
        elif self.lastiteration < time + self.mattertimestep: # if we are in between mater timestep
            return #The interpolated value on the new timestep
        else :
            self._simulate_year(time)
            return #The value at the right moment

    def set_var(self,varname,value,time):
        '''
        Send a value to Mater on the channel varname, with the value "value" at time "time"
        '''
        # The architecture should be roughly the same as in "get_var", I think with a bypass of interpolated values
        if self.lastiteration < time + self.mattertimestep: # if we are in between mater timestep
            pass 
        else :
            # Send the value 
            return 

_MATTER=MATTER_API()

def giveGPD_GET_E(GDP,time):
    global _MATTER
    """
    send GDP to matter, retrieve emission
    """
    if not _MATTER.ready: _MATTER.TrueInit(time)
    
    _MATTER.set_var('GDP',GDP,time)
    return _MATTER.get_var('E',time)


################## ALL THE NEW FIELDS LOGICS ###############################
_LOGICS = { 'size'        : {},
            'differential': {},
            'statevar'    : {'GDP': {'func': lambda time,g : 10*np.exp(g*time)},
                             'E': {'func': giveGPD_GET_E}},
            'parameter'   : {},}
'''
'p': {  'func': lambda p,inflation : p*inflation,
        'initial':1,
        'units': '$.Units^{-1}',
        'definition' : 'nominal value per physical unit produced',
        'com': 'inflation driven',
        'symbol': '$\mathcal{P}$',
        'size' : ['__ONE__','__ONE__']},
'p': { 'func' lambda p,inflation : p*inflation}, # for short
'''

################## MODELS YOU WANT TO MERGE THE NEW LOGICS INTO ############

#_LOGICS_GOODWIN,_PRESETS0= importmodel('Goodwin')
#_LOGICS = mergemodel(_LOGICS, _LOGICS_GOODWIN, verb=False) 

################## ADDING DIMENSIONS TO VARIABLES IF NOT DONE BEFORE #######
'''
Comment the line in 'Dimensions' you want to be filled by default. 
The system does not handle automatically multiple types of matrix/vector dimensions. do it manually
Modify DIM 
'''
Dimensions = { 
    #'scalar': [],
    'matrix': [],
    'vector': [],       #
}
DIM= {'scalar':['__ONE__'],
      'vector':['Nprod'],
      'matrix':['Nprod','Nprod']  }
_LOGICS=filldimensions(_LOGICS,Dimensions,DIM)

################### SUPPLEMENTS IF NEEDED ###################################
_SUPPLEMENTS={}

################### DEFIMING PRESETS WITH THEIR SUPPLEMENTS #################
_PRESETS = {
    'preset0': {
        'fields': {},
        'com': '',
        'plots': {'Var': [{'key':'',
                           'mode':False, #sensitivity, cycles
                           'log':False,
                           'idx':0, 
                           'Region':0, 
                           'tini':False, 
                           'tend':False, 
                           'title':''},
                  ],
                  'XY': [{  'x':'',
                            'y':'',
                            'color':'', 
                            'scaled':False,
                            'idx':0, 
                            'Region':0, 
                            'tini':False, 
                            'tend':False, 
                            'title':'', 
                            },
                  ],
                  'XYZ': [{ 'x':'',
                            'y':'',
                            'z':'', 
                            'color':'time', 
                            'idx':0, 
                            'Region':0, 
                            'tini':False, 
                            'tend':False, 
                            'title':''},
                  ],
                  'cycles_characteristics': [{'xaxis':'omega', 
                                              'yaxis':'employment', 
                                              'ref':'employment', 
                                              'type1':'frequency', 
                                              'normalize':False, 
                                              'Region':0, 
                                              'title':''},
                  ],
                  'plotbyunits': [{'filters_key':(),
                                   'filters_units':(),
                                   'filters_sector':(),
                                   'separate_variables':{}, 
                                   'lw':1, 
                                   'idx':0, 
                                   'Region':0, 
                                   'tini':False, 
                                   'tend':False, 
                                   'title':''}
                  ],
                  'plotnyaxis' : [{'y':[[],[]],
                                   'x':'time', 
                                   'idx':0,
                                   'Region':0,
                                   'log':False,# []
                                   'title':'', 
                                   }
                  ],    
        },
    },
}


